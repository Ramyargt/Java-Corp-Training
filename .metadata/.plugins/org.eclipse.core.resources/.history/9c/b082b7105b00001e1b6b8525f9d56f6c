package com.rgt.training.session2Basics;

import java.util.Scanner;

public class SimpleLibraryManage {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		 Scanner scanner = new Scanner(System.in);
		 Library library= new Library();
		 int choice;
		
		 do {
			 System.out.println("Welcome to Simple Library Management: ");
			 System.out.println("1.Add Book ");
			 System.out.println("2.Add Patron ");
			 System.out.println("3.Borrow Book ");
			 System.out.println("4.Return Book "); 
			 System.out.println("5.Book Availability ");
			 System.out.println("6.Borrowed books by Patrons ");
			 System.out.println("7.Exit "); 
			 System.out.println("Enter your choice: ");
			 choice= scanner.nextInt();
			 
			 switch(choice) {
			 case 1: 
				 System.out.println("Enter Book Title");
				 String BookTitle= scanner.next();
				 System.out.println("Enter Book author name");
				 String BookAuthor= scanner.next();
				 library.addBook(BookTitle);
				 break;
			 
			 case 2: 
				 System.out.println("Enter Patron name");
				 String PatronName= scanner.next();
				 library.addPatron(PatronName);
				 break;
				 
			 case 3: 
				 System.out.println("Enter Book Title");
				 String Booktitle= scanner.next();
				 library.borrowBook(Booktitle);
				 
			 case 7:
                 System.out.println("Goodbye!");
                 break;
             default:
                 System.out.println("Invalid option. Please try again.");
			 }
		 }
		 while(choice<7);
	}
}

class Library {
	
	final int MAX_BOOKS= 20;
	final int MAX_PATRONS =10;
	
	String[] BookTitles = new String[MAX_BOOKS];
	String[] Patronnames = new String[MAX_PATRONS];
	
	int bookcount=0;
	int patroncount=0;
	int bookavailability;
	
	
	public void addBook(String Booktitle) {
		bookcount++;
		if(bookcount<=MAX_BOOKS) {
		BookTitles[bookcount]=Booktitle;
		System.out.println("New Book added Successfull---");
		System.out.println("Total books after adding new Books is "+BookTitles.length);
		System.out.println("Total books added are "+bookcount);
	    }
		else if (bookcount>MAX_BOOKS) {
			System.out.println("Book storage is overflow ---------");
			System.out.println("Not able to add new books-------");
		}
		}
	
	public void addPatron(String patron) {
		patroncount++;
		if(patroncount<=MAX_PATRONS) {
			Patronnames[patroncount]=patron;
			System.out.println("New Patron added Successfull---");
			System.out.println("Total ptrons added are "+patroncount);
	    }
		else if (patroncount>MAX_PATRONS) {
			System.out.println("Patron storage is overflow ---------");
			System.out.println("Not able to add new patrons-------");
		}
		}
	
	public void borrowBook(String booktitle) {
		for(int i=0; i<MAX_BOOKS; i++) {
		if(BookTitles[i].contains(booktitle)){
			BookTitles[i].replace(booktitle,"");
			System.out.println("Total book size after Books borrowed is "+BookTitles.length);
			bookavailability=BookTitles.length-1;	
			System.out.println("Books available are "+bookavailability);
		System.out.println("Book borrowed successfull---------");
		}
		else {
			System.out.println("Books are not available to borrow----");
		}
		}
	}
}
